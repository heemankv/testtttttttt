{"version":3,"file":"index.js","sources":["../src/client.ts","../src/utils.ts"],"sourcesContent":["import type { Chain, Client, Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAvatar,\n  fetchEnsName,\n  getAccount,\n  getNetwork,\n  switchNetwork,\n  watchAccount,\n  watchNetwork\n} from '@wagmi/core'\nimport type { ConnectorId, ModalConnectorsOpts } from './types'\n\nexport class EthereumClient {\n  private readonly wagmi = {} as Client\n  public walletConnectUri = ''\n  public walletConnectVersion: ModalConnectorsOpts['version'] = 1\n  public readonly chains = [] as Chain[]\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public constructor(wagmi: any, chains: Chain[]) {\n    this.wagmi = wagmi\n    this.chains = chains\n    const { isV2 } = this.getWalletConnectConnectors()\n    this.walletConnectVersion = isV2 ? 2 : 1\n  }\n\n  // -- private ------------------------------------------- //\n  private getDefaultConnectorChainId(connector: Connector) {\n    return connector.chains[0].id\n  }\n\n  private getWalletConnectConnectors() {\n    const wcc = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnect')\n    const wc1c = this.wagmi.connectors.find((c: Connector) => c.id === 'walletConnectLegacy')\n    const connector = wcc ?? wc1c\n    if (!connector) {\n      throw new Error('WalletConnectConnector or WalletConnectLegacyConnector is required')\n    }\n\n    return { isV2: Boolean(wcc), connector }\n  }\n\n  private async connectWalletConnectV1(connector: Connector, onUri: (uri: string) => void) {\n    return new Promise<void>((resolve, reject) => {\n      connector.once('message', async ({ type }) => {\n        if (type === 'connecting') {\n          const providerConnector = (await connector.getProvider()).connector\n          this.walletConnectUri = providerConnector.uri\n          onUri(providerConnector.uri)\n          providerConnector.on('disconnect', () => {\n            reject(Error())\n          })\n          providerConnector.on('connect', () => {\n            resolve()\n          })\n        }\n      })\n    })\n  }\n\n  private async connectWalletConnectV2(connector: Connector, onUri: (uri: string) => void) {\n    const provider = await connector.getProvider()\n    let activeWalletConnectUri = ''\n\n    return new Promise<void>(resolve => {\n      provider.once('display_uri', (uri: string) => {\n        this.walletConnectUri = uri\n        activeWalletConnectUri = uri\n        onUri(uri)\n      })\n      provider.once('connect', () => {\n        if (activeWalletConnectUri === this.walletConnectUri) {\n          resolve()\n        }\n      })\n    })\n  }\n\n  // -- public web3modal ---------------------------------- //\n  public namespace = 'eip155'\n\n  public getDefaultChain() {\n    const mainnet = this.chains.find(chain => chain.id === 1)\n\n    return mainnet ?? this.chains[0]\n  }\n\n  public getConnectorById(id: ConnectorId | string) {\n    const connector = this.wagmi.connectors.find(item => item.id === id)\n    if (!connector) {\n      throw new Error(`Connector for id ${id} was not found`)\n    }\n\n    return connector\n  }\n\n  public getConnectors() {\n    const connectors = this.wagmi.connectors.filter(\n      connector => !connector.id.includes('walletConnect')\n    )\n\n    return connectors\n  }\n\n  public async connectWalletConnect(onUri: (uri: string) => void, selectedChainId?: number) {\n    const { connector, isV2 } = this.getWalletConnectConnectors()\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const handleProviderEvents = isV2\n      ? this.connectWalletConnectV2.bind(this)\n      : this.connectWalletConnectV1.bind(this)\n    const [data] = await Promise.all([\n      connect({ connector, chainId }),\n      handleProviderEvents(connector, onUri)\n    ])\n\n    return data\n  }\n\n  public async connectConnector(connectorId: ConnectorId | string, selectedChainId?: number) {\n    const connector = this.getConnectorById(connectorId)\n    const chainId = selectedChainId ?? this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  }\n\n  public disconnect = disconnect\n\n  public getAccount = getAccount\n\n  public watchAccount = watchAccount\n\n  public fetchBalance = fetchBalance\n\n  public getNetwork = getNetwork\n\n  public watchNetwork = watchNetwork\n\n  public switchNetwork = switchNetwork\n\n  // -- public web3modal (optional) ----------------------- //\n  public fetchEnsName = fetchEnsName\n\n  public fetchEnsAvatar = fetchEnsAvatar\n}\n","import { WalletConnectConnector } from '@wagmi/connectors/walletConnect'\nimport type { Chain, Connector } from '@wagmi/core'\nimport { InjectedConnector } from '@wagmi/core'\nimport { WalletConnectLegacyConnector } from '@wagmi/core/connectors/walletConnectLegacy'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport type { ModalConnectorsOpts, WalletConnectProviderOpts } from './types'\n\n// -- constants ------------------------------------------------------- //\nexport const NAMESPACE = 'eip155'\n\n// -- providers ------------------------------------------------------- //\nexport function w3mProvider<C extends Chain>({ projectId }: WalletConnectProviderOpts) {\n  return jsonRpcProvider<C>({\n    rpc: chain => {\n      const supportedChains = [\n        1, 3, 4, 5, 10, 42, 56, 69, 97, 100, 137, 420, 42161, 42220, 43114, 80001, 421611, 421613,\n        1313161554, 11297108109\n      ]\n\n      if (supportedChains.includes(chain.id)) {\n        return {\n          http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n        }\n      }\n\n      return {\n        http: chain.rpcUrls.default.http[0],\n        webSocket: chain.rpcUrls.default.webSocket?.[0]\n      }\n    }\n  })\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function w3mConnectors({ chains, version, projectId }: ModalConnectorsOpts) {\n  const isV1 = version === 1\n\n  const connectors: Connector[] = [new InjectedConnector({ chains })]\n\n  if (isV1) {\n    connectors.unshift(\n      new WalletConnectLegacyConnector({\n        chains,\n        options: { qrcode: false }\n      })\n    )\n  } else {\n    connectors.unshift(\n      new WalletConnectConnector({\n        chains,\n        options: { projectId, showQrModal: false }\n      })\n    )\n  }\n\n  return connectors\n}\n"],"names":["EthereumClient","wagmi","chains","disconnect","getAccount","watchAccount","fetchBalance","getNetwork","watchNetwork","switchNetwork","fetchEnsName","fetchEnsAvatar","isV2","connector","wcc","wc1c","onUri","resolve","reject","type","providerConnector","provider","activeWalletConnectUri","uri","mainnet","chain","id","item","selectedChainId","chainId","handleProviderEvents","data","connect","connectorId","NAMESPACE","w3mProvider","projectId","jsonRpcProvider","_a","w3mConnectors","version","isV1","connectors","InjectedConnector","WalletConnectLegacyConnector","WalletConnectConnector"],"mappings":"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"}